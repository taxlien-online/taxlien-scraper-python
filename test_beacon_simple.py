#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç Beacon scraper –¥–ª—è Mac OS (–±–µ–∑ Xvfb)
–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ /Users/anton/taxlien.dataset/beacon/
"""

import os
import json
from datetime import datetime
from seleniumbase import SB
from bs4 import BeautifulSoup
import re

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—É—Ç–µ–π
DATASET_DIR = "/Users/anton/taxlien.dataset/beacon"
os.makedirs(f"{DATASET_DIR}/html", exist_ok=True)
os.makedirs(f"{DATASET_DIR}/json", exist_ok=True)
os.makedirs(f"{DATASET_DIR}/csv", exist_ok=True)

def save_html(html: str, name: str) -> str:
    """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å HTML"""
    file_path = f'{DATASET_DIR}/html/{name}.html'
    with open(file_path, 'w', encoding='utf-8') as file:
        file.write(html)
    print(f'‚úÖ HTML —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {file_path}')
    return file_path

def save_json(data: dict, name: str) -> str:
    """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å JSON"""
    file_path = f'{DATASET_DIR}/json/{name}.json'
    with open(file_path, 'w', encoding='utf-8') as file:
        json.dump(data, file, indent=2, ensure_ascii=False)
    print(f'‚úÖ JSON —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {file_path}')
    return file_path

def save_csv_line(data: dict, name: str = "results") -> None:
    """–î–æ–±–∞–≤–∏—Ç—å —Å—Ç—Ä–æ–∫—É –≤ CSV"""
    import csv
    file_path = f'{DATASET_DIR}/csv/{name}.csv'
    
    file_exists = os.path.isfile(file_path)
    
    with open(file_path, 'a', newline='', encoding='utf-8') as file:
        writer = csv.DictWriter(file, fieldnames=data.keys())
        
        if not file_exists:
            writer.writeheader()
        
        writer.writerow(data)
    
    print(f'‚úÖ CSV –¥–æ–±–∞–≤–ª–µ–Ω–∞ —Å—Ç—Ä–æ–∫–∞: {file_path}')

def parse_beacon_html(html: str) -> dict:
    """–ü–∞—Ä—Å–∏–Ω–≥ HTML —Å—Ç—Ä–∞–Ω–∏—Ü—ã Beacon"""
    doc = BeautifulSoup(html, "html.parser")
    
    data = {
        'scraped_at': datetime.now().isoformat(),
        'platform': 'beacon',
        'county': 'maricopa_az'
    }
    
    try:
        # –ü–æ–∏—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
        text = doc.get_text()
        
        # –ù–∞–π—Ç–∏ –∑–∞–≥–æ–ª–æ–≤–æ–∫ h1
        h1 = doc.find('h1')
        if h1:
            data['page_title'] = h1.text.strip()
        
        # –ù–∞–π—Ç–∏ –≤—Å–µ —Å—Å—ã–ª–∫–∏
        links = doc.find_all('a', href=True)
        data['links_count'] = len(links)
        
        # –ù–∞–π—Ç–∏ search form
        forms = doc.find_all('form')
        data['forms_count'] = len(forms)
        
        print(f"‚úÖ Parsed: {data.get('page_title', 'N/A')}, {len(links)} links, {len(forms)} forms")
        
    except Exception as e:
        print(f"‚ö†Ô∏è  Parse error: {e}")
        data['parse_error'] = str(e)
    
    return data

def test_simple():
    """
    –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç: –æ—Ç–∫—Ä—ã—Ç—å —Å–∞–π—Ç –∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å HTML
    """
    print("\n" + "="*60)
    print("–ü–†–û–°–¢–û–ô –¢–ï–°–¢: –û—Ç–∫—Ä—ã—Ç–∏–µ —Å–∞–π—Ç–∞ Maricopa")
    print("="*60 + "\n")
    
    test_url = "https://mcassessor.maricopa.gov/"
    
    print(f"üåê URL: {test_url}")
    print(f"üìÅ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤: {DATASET_DIR}")
    print(f"‚è≥ –ó–∞–ø—É—Å–∫ –±—Ä–∞—É–∑–µ—Ä–∞ (headless)...")
    
    try:
        with SB(uc=True, headless=True) as sb:
            print("‚è≥ –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã...")
            sb.open(test_url)
            sb.sleep(3)
            
            # –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç
            screenshot_path = f"{DATASET_DIR}/html/test_screenshot.png"
            sb.save_screenshot(screenshot_path)
            print(f"üì∏ –°–∫—Ä–∏–Ω—à–æ—Ç: {screenshot_path}")
            
            # –ü–æ–ª—É—á–∏—Ç—å HTML
            html = sb.get_page_source()
            print(f"üìÑ HTML —Ä–∞–∑–º–µ—Ä: {len(html)} bytes")
            
            # –°–æ—Ö—Ä–∞–Ω–∏—Ç—å HTML
            save_html(html, "maricopa_homepage")
            
            # –ü–∞—Ä—Å–∏–Ω–≥
            data = parse_beacon_html(html)
            
            # –°–æ—Ö—Ä–∞–Ω–∏—Ç—å JSON
            save_json(data, "maricopa_result")
            
            # –°–æ—Ö—Ä–∞–Ω–∏—Ç—å CSV
            save_csv_line(data, "results")
            
            print("\n‚úÖ –¢–ï–°–¢ –ó–ê–í–ï–†–®–ï–ù!")
            print(f"üìä –î–∞–Ω–Ω—ã–µ: {json.dumps(data, indent=2, ensure_ascii=False)}")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("\n" + "="*70)
    print(" üöÄ BEACON SCRAPER TEST - Maricopa County, AZ (Simple)")
    print("="*70)
    print(f"\nüìÅ Dataset directory: {DATASET_DIR}")
    print(f"‚è∞ Started at: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n")
    
    try:
        test_simple()
        
        print("\n" + "="*70)
        print(" ‚úÖ –¢–ï–°–¢ –ó–ê–í–ï–†–®–ï–ù!")
        print("="*70)
        print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: {DATASET_DIR}")
        print(f"   - HTML: {DATASET_DIR}/html/")
        print(f"   - JSON: {DATASET_DIR}/json/")
        print(f"   - CSV:  {DATASET_DIR}/csv/")
        
        # –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        import glob
        html_files = len(glob.glob(f"{DATASET_DIR}/html/*.html"))
        json_files = len(glob.glob(f"{DATASET_DIR}/json/*.json"))
        csv_files = len(glob.glob(f"{DATASET_DIR}/csv/*.csv"))
        
        print(f"\nüìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
        print(f"   - HTML —Ñ–∞–π–ª–æ–≤: {html_files}")
        print(f"   - JSON —Ñ–∞–π–ª–æ–≤: {json_files}")
        print(f"   - CSV —Ñ–∞–π–ª–æ–≤: {csv_files}")
        
        # –ü–æ–∫–∞–∑–∞—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        print(f"\nüìÇ –°–æ–¥–µ—Ä–∂–∏–º–æ–µ {DATASET_DIR}/:")
        for root, dirs, files in os.walk(DATASET_DIR):
            level = root.replace(DATASET_DIR, '').count(os.sep)
            indent = ' ' * 2 * level
            print(f'{indent}{os.path.basename(root)}/')
            subindent = ' ' * 2 * (level + 1)
            for file in files:
                file_size = os.path.getsize(os.path.join(root, file))
                print(f'{subindent}{file} ({file_size} bytes)')
        
    except KeyboardInterrupt:
        print("\n‚ö†Ô∏è  –ü—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    main()

