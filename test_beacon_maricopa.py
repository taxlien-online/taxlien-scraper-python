#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—É—Å–∫ Beacon scraper –¥–ª—è Maricopa County, AZ
–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ /Users/anton/taxlien.dataset/beacon/
"""

import os
import json
from datetime import datetime
from sbvirtualdisplay import Display
from seleniumbase import SB
from bs4 import BeautifulSoup

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—É—Ç–µ–π
DATASET_DIR = "/Users/anton/taxlien.dataset/beacon"
os.makedirs(f"{DATASET_DIR}/html", exist_ok=True)
os.makedirs(f"{DATASET_DIR}/json", exist_ok=True)
os.makedirs(f"{DATASET_DIR}/csv", exist_ok=True)

os.environ['DISPLAY'] = ':99'

def save_html(html: str, name: str) -> str:
    """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å HTML"""
    file_path = f'{DATASET_DIR}/html/{name}.html'
    with open(file_path, 'w', encoding='utf-8') as file:
        file.write(html)
    print(f'‚úÖ HTML —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {file_path}')
    return file_path

def save_json(data: dict, name: str) -> str:
    """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å JSON"""
    file_path = f'{DATASET_DIR}/json/{name}.json'
    with open(file_path, 'w', encoding='utf-8') as file:
        json.dump(data, file, indent=2, ensure_ascii=False)
    print(f'‚úÖ JSON —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {file_path}')
    return file_path

def save_csv_line(data: dict, name: str = "results") -> None:
    """–î–æ–±–∞–≤–∏—Ç—å —Å—Ç—Ä–æ–∫—É –≤ CSV"""
    import csv
    file_path = f'{DATASET_DIR}/csv/{name}.csv'
    
    # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ñ–∞–π–ª
    file_exists = os.path.isfile(file_path)
    
    with open(file_path, 'a', newline='', encoding='utf-8') as file:
        writer = csv.DictWriter(file, fieldnames=data.keys())
        
        # –ó–∞–ø–∏—Å–∞—Ç—å –∑–∞–≥–æ–ª–æ–≤–∫–∏, –µ—Å–ª–∏ —Ñ–∞–π–ª –Ω–æ–≤—ã–π
        if not file_exists:
            writer.writeheader()
        
        writer.writerow(data)
    
    print(f'‚úÖ CSV –¥–æ–±–∞–≤–ª–µ–Ω–∞ —Å—Ç—Ä–æ–∫–∞: {file_path}')

def parse_beacon_html(html: str) -> dict:
    """–ü–∞—Ä—Å–∏–Ω–≥ HTML —Å—Ç—Ä–∞–Ω–∏—Ü—ã Beacon"""
    import re
    doc = BeautifulSoup(html, "html.parser")
    
    data = {
        'scraped_at': datetime.now().isoformat(),
        'platform': 'beacon',
        'county': 'maricopa_az'
    }
    
    try:
        # –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –Ω–∞–π—Ç–∏ –æ—Å–Ω–æ–≤–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        # Beacon —á–∞—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Ç–∞–±–ª–∏—Ü—ã —Å –∫–ª–∞—Å—Å–æ–º tabular-data
        info_table = doc.find(class_=re.compile("tabular-data|property-info", re.IGNORECASE))
        
        if info_table:
            # PARCEL ID
            parcel = info_table.find(id=re.compile("parcel|PropertyID", re.IGNORECASE))
            if parcel:
                data['parcel_id'] = parcel.text.strip()
            
            # OWNER
            owner = doc.find(id=re.compile("owner|name", re.IGNORECASE))
            if owner:
                data['owner'] = owner.text.strip()
            
            # ADDRESS
            address = doc.find(id=re.compile("address|situs", re.IGNORECASE))
            if address:
                data['site_address'] = address.text.strip()
            
            # VALUE
            value = doc.find(id=re.compile("value|assessed", re.IGNORECASE))
            if value:
                data['assessed_value'] = value.text.strip()
        
        # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ —á–µ—Ä–µ–∑ —Ç–∞–±–ª–∏—Ü—É, –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —á–µ—Ä–µ–∑ —Ç–µ–∫—Å—Ç
        if 'parcel_id' not in data:
            # –ü–æ–∏—Å–∫ –ø–æ –ø–∞—Ç—Ç–µ—Ä–Ω–∞–º
            text = doc.get_text()
            
            # Maricopa –æ–±—ã—á–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Ñ–æ—Ä–º–∞—Ç: 123-45-678
            parcel_match = re.search(r'\b\d{3}-\d{2}-\d{3,4}\b', text)
            if parcel_match:
                data['parcel_id'] = parcel_match.group()
        
        print(f"‚úÖ Parsed: {data.get('parcel_id', 'N/A')}")
        
    except Exception as e:
        print(f"‚ö†Ô∏è  Parse error: {e}")
        data['parse_error'] = str(e)
    
    return data

def test_single_url():
    """
    –¢–µ—Å—Ç 1: –°–∫—Ä–∞–ø–∏–Ω–≥ –æ–¥–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    """
    print("\n" + "="*60)
    print("–¢–ï–°–¢ 1: –°–∫—Ä–∞–ø–∏–Ω–≥ –æ–¥–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã Beacon")
    print("="*60 + "\n")
    
    # URL –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (–Ω—É–∂–Ω–æ –Ω–∞–π—Ç–∏ —Ä–µ–∞–ª—å–Ω—ã–π)
    # –ü—Ä–∏–º–µ—Ä URL –¥–ª—è Maricopa County
    test_url = "https://mcassessor.maricopa.gov/"
    
    print(f"üåê URL: {test_url}")
    print(f"üìÅ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤: {DATASET_DIR}")
    print(f"‚è≥ –ó–∞–ø—É—Å–∫ –±—Ä–∞—É–∑–µ—Ä–∞...")
    
    with Display(visible=False, size=(1920, 1080)) as disp:
        print(f'‚úÖ Virtual Display: {disp.is_alive()}')
        
        with SB(uc=True, headless=False) as sb:
            print("‚è≥ –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã...")
            sb.uc_open_with_reconnect(test_url, 2)
            sb.sleep(3)
            
            # –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç
            screenshot_path = f"{DATASET_DIR}/html/test_screenshot.png"
            sb.save_screenshot(screenshot_path)
            print(f"üì∏ –°–∫—Ä–∏–Ω—à–æ—Ç: {screenshot_path}")
            
            # –ü–æ–ª—É—á–∏—Ç—å HTML
            html = sb.get_page_source()
            print(f"üìÑ HTML —Ä–∞–∑–º–µ—Ä: {len(html)} bytes")
            
            # –°–æ—Ö—Ä–∞–Ω–∏—Ç—å HTML
            save_html(html, "test_page")
            
            # –ü–∞—Ä—Å–∏–Ω–≥
            data = parse_beacon_html(html)
            
            # –°–æ—Ö—Ä–∞–Ω–∏—Ç—å JSON
            save_json(data, "test_result")
            
            # –°–æ—Ö—Ä–∞–Ω–∏—Ç—å CSV
            save_csv_line(data, "test_results")
            
            print("\n‚úÖ –¢–ï–°–¢ 1 –ó–ê–í–ï–†–®–ï–ù!")
            print(f"üìä –î–∞–Ω–Ω—ã–µ: {json.dumps(data, indent=2, ensure_ascii=False)}")

def test_search_functionality():
    """
    –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ—É–Ω–∫—Ü–∏–∏ –ø–æ–∏—Å–∫–∞
    """
    print("\n" + "="*60)
    print("–¢–ï–°–¢ 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–∏—Å–∫–∞ Beacon")
    print("="*60 + "\n")
    
    base_url = "https://mcassessor.maricopa.gov/"
    
    with Display(visible=False, size=(1920, 1080)) as disp:
        with SB(uc=True, headless=False) as sb:
            print("‚è≥ –û—Ç–∫—Ä—ã—Ç–∏–µ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã...")
            sb.uc_open_with_reconnect(base_url, 2)
            sb.sleep(2)
            
            # –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –Ω–∞–π—Ç–∏ –ø–æ–ª–µ –ø–æ–∏—Å–∫–∞
            search_selectors = [
                "input[type='text'][name*='search']",
                "input[type='text'][name*='parcel']",
                "input[id*='search']",
                "input[placeholder*='Search']"
            ]
            
            found_search = False
            for selector in search_selectors:
                try:
                    search_input = sb.find_element(selector, by="css selector")
                    if search_input:
                        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –ø–æ–ª–µ –ø–æ–∏—Å–∫–∞: {selector}")
                        found_search = True
                        
                        # –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –≤–≤–µ—Å—Ç–∏ —Ç–µ—Å—Ç–æ–≤—ã–π parcel
                        test_parcel = "100-00-001"
                        sb.type(selector, test_parcel)
                        print(f"‚úÖ –í–≤–µ–¥–µ–Ω parcel: {test_parcel}")
                        
                        # –ù–∞–π—Ç–∏ –∫–Ω–æ–ø–∫—É –ø–æ–∏—Å–∫–∞
                        search_button_selectors = [
                            "button[type='submit']",
                            "input[type='submit']",
                            "button:contains('Search')"
                        ]
                        
                        for btn_selector in search_button_selectors:
                            try:
                                sb.click(btn_selector)
                                print(f"‚úÖ –ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ –ø–æ–∏—Å–∫–∞")
                                sb.sleep(3)
                                break
                            except:
                                continue
                        
                        break
                except:
                    continue
            
            if not found_search:
                print("‚ö†Ô∏è  –ü–æ–ª–µ –ø–æ–∏—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                print("üí° –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞...")
                sb.save_screenshot(f"{DATASET_DIR}/html/search_not_found.png")
            
            # –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
            html = sb.get_page_source()
            save_html(html, "search_result")
            
            print("\n‚úÖ –¢–ï–°–¢ 2 –ó–ê–í–ï–†–®–ï–ù!")

def test_navigation():
    """
    –¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ (–∫–Ω–æ–ø–∫–∏ Next/Prev)
    """
    print("\n" + "="*60)
    print("–¢–ï–°–¢ 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏")
    print("="*60 + "\n")
    
    # –≠—Ç–æ—Ç —Ç–µ—Å—Ç —Ç—Ä–µ–±—É–µ—Ç URL –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ parcel
    print("‚ö†Ô∏è  –¢—Ä–µ–±—É–µ—Ç—Å—è URL –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ parcel –¥–ª—è —Ç–µ—Å—Ç–∞")
    print("üí° –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–æ–∫–∞...")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("\n" + "="*70)
    print(" üöÄ BEACON SCRAPER TEST - Maricopa County, AZ")
    print("="*70)
    print(f"\nüìÅ Dataset directory: {DATASET_DIR}")
    print(f"‚è∞ Started at: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n")
    
    try:
        # –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
        test_single_url()
        test_search_functionality()
        # test_navigation()  # –ü–æ–∫–∞ –∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–æ
        
        print("\n" + "="*70)
        print(" ‚úÖ –í–°–ï –¢–ï–°–¢–´ –ó–ê–í–ï–†–®–ï–ù–´!")
        print("="*70)
        print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: {DATASET_DIR}")
        print(f"   - HTML: {DATASET_DIR}/html/")
        print(f"   - JSON: {DATASET_DIR}/json/")
        print(f"   - CSV:  {DATASET_DIR}/csv/")
        
        # –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        import glob
        html_files = len(glob.glob(f"{DATASET_DIR}/html/*.html"))
        json_files = len(glob.glob(f"{DATASET_DIR}/json/*.json"))
        csv_files = len(glob.glob(f"{DATASET_DIR}/csv/*.csv"))
        
        print(f"\nüìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
        print(f"   - HTML —Ñ–∞–π–ª–æ–≤: {html_files}")
        print(f"   - JSON —Ñ–∞–π–ª–æ–≤: {json_files}")
        print(f"   - CSV —Ñ–∞–π–ª–æ–≤: {csv_files}")
        
    except KeyboardInterrupt:
        print("\n‚ö†Ô∏è  –ü—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    main()

